>>> matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
>>> print(matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
[[ 7 10]
 [15 22]]
>>> print(matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
[[13 16]]
>>> print(matrix_mul([[1, 2, 3, 4]], [[3, 4], [5, 6]]))
Traceback (most recent call last):
 ...
ValueError: shapes (1,4) and (2,2) not aligned: 4 (dim 1) != 2 (dim 0)
>>> print(matrix_mul("string", [[3, 4], [5, 6]]))
Traceback (most recent call last):
 ...
ValueError: Scalar operands are not allowed, use '*' instead
>>> print(matrix_mul([[3, 4], [5, 6]], (1, 2)))
[11 17]
>>> print(matrix_mul([[1, 2]], [[3, 4], [(2, 3), 6]]))
Traceback (most recent call last):
 ...
ValueError: setting an array element with a sequence.
>>> print(matrix_mul([[1, 2], [3, "str"]], [[1, 2], [3, 4]]))
Traceback (most recent call last):
 ...
TypeError: invalid data type for einsum
>>> print(matrix_mul())
Traceback (most recent call last):
 ...
TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
>>> print(matrix_mul([[3, 4], [5, 6]]))
Traceback (most recent call last):
 ...
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'
>>> print(matrix_mul([], [[1, 2], [3, 4]]))
Traceback (most recent call last):
 ...
ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)
>>> print(matrix_mul([[1, 2], [3, 4]], [[]]))
Traceback (most recent call last):
 ...
ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)
>>> print(matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]]))
Traceback (most recent call last):
 ...
ValueError: setting an array element with a sequence.
>>> print(matrix_mul([[1, 2], [3, 4]], [[1, 2, 3], [3, 4]]))
Traceback (most recent call last):
 ...
ValueError: setting an array element with a sequence.
>>> print(matrix_mul([[1, 2], [3, float("inf")]], [[1, 2], [3, 4]]))
[[ 7. 10.]
 [inf inf]]
>>> print(matrix_mul([[1, 2], [3, float("NaN")]], [[1, 2], [3, 4]]))
[[ 7. 10.]
 [nan nan]]
>>> print(matrix_mul([[1, 2], [3, float("NaN")]], [[1, float("inf")], [3, 4]]))
[[ 7. inf]
 [nan nan]]
>>> print(matrix_mul([[1, 2], [3, -2]], [[1, -1], [-3, 4]]))
[[ -5   7]
 [  9 -11]]
>>> print(matrix_mul([[1, 2], (1, 2)], [[1, 2], [3, 4]]))
[[ 7 10]
 [ 7 10]]
>>> print(matrix_mul([[1, 2], [1, 2]], [[1, 2], (3, 4)]))
[[ 7 10]
 [ 7 10]]
